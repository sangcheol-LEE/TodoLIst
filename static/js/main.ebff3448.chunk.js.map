{"version":3,"sources":["TodoContext.js","Components/TodoCreate.js","Components/TodoHead.js","Components/TodoItem.js","Components/TodoList.js","Components/TodoTemplate.js","App.js","index.js"],"names":["initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","children","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","useTodoDispatch","TodoCreate","useState","open","setOpen","setValue","useTodoNextId","InsertFormPositioner","InsertForm","onSubmit","e","current","Input","placeholder","autoFocus","onChange","target","CircleButton","onClick","styled","button","props","css","div","form","input","React","memo","TodoHeadBlock","TodoHead","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","TodoItem","TodoItemBlock","CheckCircle","Text","Remove","TodoListBlock","TodoList","todos","TodoTemplateBlock","TodoTemplate","GlobalStyle","createGlobalStyle","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebff3448.chunk.js","sourcesContent":["import React, { useReducer,createContext,useContext, useRef } from 'react';\n\nconst initialTodos = [\n  {\n    id: 1,\n    text: \"프로젝트 생성하기\",\n    done: true\n  },\n  {\n    id: 2,\n    text: \"컴포넌트 스타일링 하기\",\n    done: true\n  },\n  {\n    id: 3,\n    text: \"Context 만들기\",\n    done: false,\n  },\n  {\n    id: 4,\n    text: \"기능 구현하기\",\n    done: false,\n  },\n];\n\n  /* \n   앞으로 만들 3가지 action !\n    CREATE\n    TOGGLE\n    REMOVE\n  */\n\nconst todoReducer = ( state, action ) =>{ \n  // 투두리듀서는 추후 유즈리듀서 함수에서 사용할 함수\n  // 스테이트와 액션을 가져와서 그 다음 상태를 리턴해주는 함수 \n  switch(action.type) {\n    case \"CREATE\" :\n      return state.concat(action.todo);\n    case \"TOGGLE\" :\n      return state.map(\n        todo => todo.id === action.id ? { ...todo, done: !todo.done } : todo\n      );\n    case \"REMOVE\" :\n      return state.filter(todo => todo.id !== action.id);\n      default: \n        throw new Error(`Unhandled action type : ${action.type}`);\n  }\n}\n\nconst TodoStateContext = createContext();\nconst TodoDispatchContext = createContext();\nconst TodoNextIdContext = createContext();\n\nexport function TodoProvider({ children }) {\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\n  const nextId = useRef(5);\n  return (\n    <TodoStateContext.Provider value={state}>\n      <TodoDispatchContext.Provider value={dispatch}>\n        <TodoNextIdContext.Provider value={nextId}>\n          {children}\n        </TodoNextIdContext.Provider>\n      </TodoDispatchContext.Provider>\n    </TodoStateContext.Provider>\n  )\n}\n\nexport function useTodoState() {\n  const context = useContext(TodoStateContext);\n  if(!context) {\n    throw new Error (\"Cannot find TodoProvider\")\n  }\n  return context;\n}\n\nexport function useTodoDispatch() {\n  const context = useContext(TodoDispatchContext);\n  if(!context) {\n    throw new Error (\"Cannot find TodoProvider\")\n  }\n  return context;\n}\n\nexport function useTodoNextId() {\n  const context = useContext(TodoNextIdContext);\n  if(!context) {\n    throw new Error (\"Cannot find TodoProvider\")\n  }\n  return context;\n}","import React, {useState} from \"react\";\nimport styled ,{css} from \"styled-components\";\nimport { MdAdd } from 'react-icons/md';\nimport { useTodoDispatch, useTodoNextId } from \"../TodoContext\";\n\nconst TodoCreate = () => {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const dispatch = useTodoDispatch();\n  const nextId = useTodoNextId();\n\n  const onToggle = () => setOpen(!open);\n  const onChange = e => setValue(e.target.value);\n  const onSubmit = e => {\n    dispatch({\n      type: 'CREATE',\n      todo: {\n        id: nextId.current,\n        text: value,\n        done: false,\n      }\n    });\n    setValue('');\n    setOpen(false);\n    nextId.current += 1;\n  };\n\n\n\n  return (\n    <>\n    {open && (\n      <InsertFormPositioner>\n          <InsertForm onSubmit={onSubmit}>\n            <Input \n              placeholder=\"할 일을 입력 후 Enter을 누르세요\" \n              autoFocus \n              onChange={onChange}\n              value={value}\n              />\n          </InsertForm>\n      </InsertFormPositioner>\n    )}\n    <CircleButton onClick={onToggle} open={open} >\n      <MdAdd />\n    </CircleButton>\n    </>\n  );\n}\n\nconst CircleButton = styled.button `\n  background: #38d9a9;\n  &:hover {\n    background: #63e6be;  \n  }\n  &:active {\n    background: #20c997;\n  }\n\n  z-index: 5;\n  cursor: pointer;\n  width: 80px;\n  height: 80px;\n  display:flex;\n  align-items:center;\n  justify-content:center;\n\n  position: absolute;\n  left:50%;\n  bottom: 0px;\n  transform: translate(-50%, 50%);\n\n  font-size: 60px;\n  color: white;\n  border-radius: 40px;\n\n  border: none;\n  outline: none;\n\n  transition: 0.125s all ease-in;\n  ${props => props.open && css`\n    background: #ff6b6b;\n    &:hover {\n      background: #ff8787;\n    }\n    &:active {\n      background: #fa5252;\n    }\n    transform: translate(-50%, 50%) rotate(45deg);\n\n\n  `}\n`;\n\nconst InsertFormPositioner = styled.div`\n  width:100%;\n  bottom: 0;\n  left: 0;\n  position: absolute;\n`;\n\nconst InsertForm = styled.form`\n  background: #f8f9fa;\n  padding: 32px;\n  padding-bottom : 72px;\n  border-bottom-left-radius: 16px;\n  border-bottom-right-radius: 16px;\n  border-top: 1px solid #e9ecef;\n`;\n\nconst Input = styled.input`\n  padding: 12px;\n  border-radius: 4px;\n  border: 1px solid #dee2e6;\n  width: 100%;\n  outline:none;\n  font-size:18px;\n  box-sizing: border-box;\n`; \n\nexport default React.memo(TodoCreate);\n\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useTodoState } from '../TodoContext';\n\n\n\nconst TodoHead = () => {\n  const todos = useTodoState();\n  const undoneTasks = todos.filter(todo => !todo.done);\n\n  const today = new Date();\n  const dateString = today.toLocaleDateString('ko-KR', {\n    year: 'numeric',\n    month: 'long' ,\n    day: 'numeric'\n  });\n  const dayName = today.toLocaleDateString('ko-KR', {\n    weekday: 'long'\n  });\n\n  return (\n      <TodoHeadBlock>\n        <h1>{dateString}</h1>\n        <div className=\"day\">{dayName}</div>\n        <div className=\"tasks-left\">할 일 {undoneTasks.length }개남음</div>\n\n      </TodoHeadBlock>\n    \n    )\n}\n\n\nconst TodoHeadBlock = styled.div`\n  padding: 48px 32px 24px 32px;\n  border-bottom:1px solid #e9ecef;\n\n\n  h1 {\n    margin : 0;\n    font-size : 35px;\n    color: #343a40;\n  }\n\n  .day {\n    margin-top:4px;\n    color: #868e96;\n    font-size: 21px;\n  }\n\n  .tasks-left{\n    color: #20c997;\n    font-size: 18px;\n    margin-top: 40px;\n    font-weight: bold;\n  }\n`;\n\n\nexport default TodoHead;","import React from 'react'\nimport styled, { css } from 'styled-components';\nimport { MdDone, MdDelete } from 'react-icons/md';\nimport { useTodoDispatch } from '../TodoContext';\n\n\n\n\nconst TodoItem= ({id, done, text}) => {\n  const dispatch = useTodoDispatch();\n  const onToggle = () => \n    dispatch({\n      type:\"TOGGLE\",\n      id\n    });\n    \n  const onRemove = () => \n    dispatch({\n      type : 'REMOVE',\n      id\n    });\n\n  return (\n    <TodoItemBlock>\n      <CheckCircle done={done} onClick={onToggle}>\n        {done && <MdDone/>}\n      </CheckCircle>\n      <Text done={done}>{text}</Text>\n      <Remove onClick={onRemove}>\n        <MdDelete />\n      </Remove>\n    </TodoItemBlock>\n  )\n}\n\n\n\nconst CheckCircle = styled.div`\n  width: 32px;\n  height: 32px;\n  border-radius: 16px;\n  border: 1px solid #ced4da;\n  font-size :24px;\n  display: flex;\n  align-items: center;\n  justify-content: center; \n  margin-right: 20px;\n  cursor: pointer;\n  ${props => props.done && css`\n    border: 1px solid #38d9a9;\n    color: #38d9a9;\n  `}\n`;\n\nconst Text = styled.div`\n  flex:1;\n  font-size : 21px;\n  color: #495057;\n  ${props => \n    props.done && \n    css`\n      color: #ced4da;\n    `}\n`; \n \nconst Remove = styled.div`\n  opacity:0; //ToddItem 블록에 hover시에 동작되게 할 것이다.\n  display:flex;\n  align-items:center;\n  justify-content:center;\n  color: #dee2e6;\n  font-size : 24px;\n  cursor: pointer;\n  &:hover {\n    color: #ff6b6b;\n  }\n`;\n\n\nconst TodoItemBlock = styled.div`\n  display: flex;\n  align-items:center;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  &:hover {\n    ${Remove} {\n      opacity: 1;\n    }\n  }\n`;\n\nexport default React.memo(TodoItem);","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useTodoState } from \"../TodoContext\";\nimport TodoItem from \"./TodoItem\";\n\nconst TodoListBlock = styled.div`\n  flex: 1; //리스트가 되는 화면에서 todoTemplate에서 먹인 flex와 방향을 column으로 정했는데\n  // 이때 1이라고 해줌으로써 자신이 차지 할 수 있는 모든 영역을 차지하겠다는 의미 \n  padding: 20px 32px;\n  padding-bottom: 48px;\n  overflow-y: auto; //나중에 항목이 너무 많아지게 된다면 스크롤 바를 보여준다.overflow-y\n `; \n\nconst TodoList = () => {\n  const todos = useTodoState();\n  return (\n  <TodoListBlock>\n      {todos.map(\n        todo => (\n          <TodoItem\n            key={todo.id}\n            id={todo.id}\n            text={todo.text}\n            done={todo.done}\n          />\n        )\n      )}\n  </TodoListBlock>\n  );\n}\n\nexport default TodoList;","import React from 'react'\nimport styled from 'styled-components';\n\nconst TodoTemplateBlock = styled.div`\n  width:512px;\n  height: 768px;\n\n  position: relative;\n  background: white;\n  border-radius:16px;\n  box-shadow: 0 0 8px rgba(0,0,0,0.04);\n  \n  margin: 0 auto;\n  margin-top : 96px;\n  margin-bottom : 32px;\n\n  display:flex;\n  flex-direction:column;\n`;\n\n\nconst TodoTemplate = ({children}) => {\n  return (\n    <TodoTemplateBlock>{children}</TodoTemplateBlock>\n  )\n}\n\nexport default TodoTemplate;","import React from \"react\"\nimport { createGlobalStyle } from 'styled-components'\nimport TodoCreate from \"./Components/TodoCreate\";\nimport TodoHead from \"./Components/TodoHead\";\nimport TodoList from \"./Components/TodoList\";\nimport TodoTemplate from \"./Components/TodoTemplate\";\nimport { TodoProvider } from \"./TodoContext\";\n\n\nconst GlobalStyle = createGlobalStyle`\n  body{\n  background: #e9ecef;\n  }\n`;\n\nfunction App() {\n  return (\n    <TodoProvider>\n      <GlobalStyle/>\n      <TodoTemplate>\n        <TodoHead/>\n        <TodoList/>\n        <TodoCreate />\n      </TodoTemplate>\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}